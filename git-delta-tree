#!/usr/bin/env python3

import subprocess
from collections import defaultdict

def tree():
    return defaultdict(tree)


def scan(range):
    output = subprocess.check_output(['git', 'diff-tree', '-r', range]).decode('utf-8')
    root = tree()

    for line in output.split('\n'):
        if len(line) == 0:
            break

        details, path = line.split('\t')
        details = details.split(' ')

        mode = details[1]
        sha = details[3]

        ctx = root
        *path, name = path.split('/')
        for part in path:
            ctx = ctx[part]

        ctx[name] = (mode, sha)

    return root


def create_tree(root):
    data = []
    for k,v in root.items():
        if isinstance(v, tuple):
            data.append((v[0], 'blob', v[1], k))
        else:
            child_tree = create_tree(v)
            data.append(('040000', 'tree', child_tree, k))

    treetext = '\n'.join(['%s %s %s\t%s' % d for d in data])
    p = subprocess.Popen(['git', 'mktree'], stdin=subprocess.PIPE,
                                            stdout=subprocess.PIPE)
    out, err = p.communicate(input=treetext.encode('utf-8'))
    return out.decode('utf-8').strip('\n')


if __name__ == '__main__':
    import sys

    print(create_tree(scan(sys.argv[1])))
